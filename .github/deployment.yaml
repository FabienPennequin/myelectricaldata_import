name: Deployment

on:
  release:
    types:
      - published

jobs:
  requirements:
    runs-on: decathlon
    timeout-minutes: 20
    steps:
      - name: Check vault token validity
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: https://terraform-secret-vault.dktapp.cloud
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/monitoring/dynatrace/global WEBHOOK_GOOGLE_CHAT ;

  informations:
    needs: [requirements]
    runs-on: decathlon
    timeout-minutes: 20
    env:
      APP_VERSION: ${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v2
      - name: Set environment from branch
        id: set_env
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.event.release.prerelease }}" = "false" ]; then
            echo "::set-output name=env_name::production"
          else
            echo "::set-output name=env_name::preprod"
          fi
    outputs:
      region: europe-west4
      env_name: ${{ steps.set_env.outputs.env_name }}

  terraform_apply:
    needs: [informations]
    runs-on: decathlon
    timeout-minutes: 20
    permissions:
      id-token: write
      contents: read
    environment: ${{ needs.informations.outputs.env_name }}
    env:
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      APP_VERSION: ${{ github.event.release.tag_name }}
      SERVICE_NAME: dynapi
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      #################################################################################################################
      # GOOGLE AUTHENTIFICATION
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_WKI_POOL }}
          service_account: ${{ secrets.GCP_WKI_GITHUB_SA }}
      - name: Docker Auth
        run: gcloud auth configure-docker europe-west4-docker.pkg.dev --quiet
      #################################################################################################################
      # INSTALL REQUIREMENTS
      - name: Setup environment
        run: |
          pip install --upgrade pip
          make install-requirements
      - name: Docker Auth
        run: gcloud auth configure-docker europe-west4-docker.pkg.dev --quiet
      #################################################################################################################
      # CHANGE APPLICATION VERSION
      - name: Get version
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          APP_VERSION: ${{ github.event.release.tag_name }}
        id: version
        run: make load-config-${{ needs.informations.outputs.env_name }}
      #################################################################################################################
      # GITHUB AUTH (For modules pulling)
      - uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: https://foo:${{ secrets.DKTUNITED_TOKEN }}@github.com
      #################################################################################################################
      # ACTION
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ needs.informations.outputs.terraform_version }}
          cli_config_credentials_hostname: terraform.decathlon.net
          cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
      - name: Terraform Init
        id: init
        env:
          GITHUB_TOKEN: ${{ secrets.DKTUNITED_TOKEN }}
        run: terraform -chdir=infra init -no-color
      - name: Terraform Validate
        id: validate
        env:
          GITHUB_TOKEN: ${{ secrets.DKTUNITED_TOKEN }}
        run: terraform -chdir=infra validate -no-color
      - name: Terraform Apply Auto Approved
        env:
          GITHUB_TOKEN: ${{ secrets.DKTUNITED_TOKEN }}
        id: plan
        run: terraform -chdir=infra apply -no-color -auto-approve

  docker_build_push:
    needs: [informations, terraform_apply]
#    needs: [informations]
    runs-on: decathlon
    timeout-minutes: 20
    environment: ${{ needs.informations.outputs.env_name }}
    permissions:
      id-token: write
      contents: read
    env:
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      APP_VERSION: ${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v2
      #################################################################################################################
      # GOOGLE AUTHENTIFICATION
      - id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_WKI_POOL }}
          service_account: ${{ secrets.GCP_WKI_GITHUB_SA }}
      - name: Docker Auth
        run: gcloud auth configure-docker ${{ needs.informations.outputs.region }}-docker.pkg.dev --quiet
      #################################################################################################################
      # INSTALL REQUIREMENTS
      - name: Setup environment
        run: |
          pip install --upgrade pip
          make install-requirements
      #################################################################################################################
      # CHANGE APPLICATION VERSION
      - name: Get version
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          APP_VERSION: ${{ github.event.release.tag_name }}
        id: version
        run: make load-config-${{ needs.informations.outputs.env_name }}
      #################################################################################################################
      # DOCKER BUILD & PUSH
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DYNATRACE_DYNAPI }}
          SLACK_CHANNEL: dynatrace-dynapi
          SLACK_ICON: https://cdn-icons-png.flaticon.com/512/25/25231.png
          SLACK_TITLE: "[${{ needs.informations.outputs.env_name }}] DynAPI"
          SLACK_COLOR: "#5A74F5"
          SLACK_USERNAME: Github
          SLACK_MESSAGE: |
            DynAPI : Build new image : europe-west4-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT_ID }}/dynapi/dynapi:${{ github.event.release.tag_name }}
            ${{ secrets.GCP_WKI_GITHUB_SA }}

      - name: Build ${{ needs.informations.outputs.version }}
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        id: build
        run: |
          gcloud --quiet auth list
          make ci-docker-build-${{ github.event.release.tag_name }}
          make ci-docker-push-${{ github.event.release.tag_name }}

      - name: Slack Notification failed!
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DYNATRACE_DYNAPI }}
          SLACK_CHANNEL: dynatrace-dynapi
          SLACK_ICON: https://cdn-icons-png.flaticon.com/512/25/25231.png
          SLACK_TITLE: "[${{ needs.informations.outputs.env_name }}] DynAPI"
          SLACK_USERNAME: Github
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_MESSAGE: 'Docker build & push failed! (${{ github.event.release.tag_name }})'
  deploy:
    needs: [informations, docker_build_push, terraform_apply]
#    needs: [informations]
    runs-on: decathlon
    timeout-minutes: 20
    permissions:
      id-token: write
      contents: read
    environment: ${{ needs.informations.outputs.env_name }}
    env:
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      APP_VERSION: ${{ github.event.release.tag_name }}
      SERVICE_NAME: dynapi
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      - id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_WKI_POOL }}
          service_account: ${{ secrets.GCP_WKI_GITHUB_SA }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DYNATRACE_DYNAPI }}
          SLACK_CHANNEL: dynatrace-dynapi
          SLACK_ICON: https://cdn-icons-png.flaticon.com/512/25/25231.png
          SLACK_TITLE: "[${{ needs.informations.outputs.env_name }}] DynAPI"
          SLACK_COLOR: "#5A74F5"
          SLACK_USERNAME: Github
          SLACK_MESSAGE: 'DynAPI : Deploy version ${{ github.event.release.tag_name }}'
      - id: cloud-run-deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE_NAME }}
          image: europe-west4-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT_ID }}/dynapi/dynapi:${{ github.event.release.tag_name }}
          workload_identity_provider: ${{ secrets.GCP_WKI_POOL }}
          region: ${{ needs.informations.outputs.region }}
          service_account: ${{ secrets.GCP_WKI_GITHUB_SA }}
          port: 80
          secrets: ${{ secrets.CLOUD_RUN_LIST}}

      - name: Slack Notification success!
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DYNATRACE_DYNAPI }}
          SLACK_CHANNEL: dynatrace-dynapi
          SLACK_ICON: https://cdn-icons-png.flaticon.com/512/25/25231.png
          SLACK_TITLE: "[${{ needs.informations.outputs.env_name }}] DynAPI"
          SLACK_USERNAME: Github
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_MESSAGE: 'New release is online! (${{ github.event.release.tag_name }})'

      - name: Slack Notification failed!
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DYNATRACE_DYNAPI }}
          SLACK_CHANNEL: dynatrace-dynapi
          SLACK_ICON: https://cdn-icons-png.flaticon.com/512/25/25231.png
          SLACK_TITLE: "[${{ needs.informations.outputs.env_name }}] DynAPI"
          SLACK_USERNAME: Github
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_MESSAGE: 'Release deployment failed! (${{ github.event.release.tag_name }})'